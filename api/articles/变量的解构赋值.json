{"title":"变量的解构赋值","slug":"变量的解构赋值","date":"2021-03-30T10:49:59.564Z","updated":"2021-03-30T11:22:52.229Z","comments":true,"excerpt":"","content":"<hr>\n<h5 id=\"1-解构时分为匹配模式和被赋值的变量，-若相同可简写，-注意区分\"><a href=\"#1-解构时分为匹配模式和被赋值的变量，-若相同可简写，-注意区分\" class=\"headerlink\" title=\"1. 解构时分为匹配模式和被赋值的变量， 若相同可简写， 注意区分\"></a>1. 解构时分为匹配模式和被赋值的变量， 若相同可简写， 注意区分</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; matchValue &#125; = &#123; <span class=\"attr\">matchValue</span>: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matchValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于 =</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">matchValue</span>: matchValue &#125; = &#123; <span class=\"attr\">matchValue</span>: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matchValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所以 ==</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">matchValue</span>: value &#125; = &#123; <span class=\"attr\">matchValue</span>: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matchValue) <span class=\"comment\">// 报未定义错误， 只是匹配模式， 不会被赋值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(value) <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-函数参数\"><a href=\"#2-函数参数\" class=\"headerlink\" title=\"2. 函数参数\"></a>2. 函数参数</h5><p>首先解构赋值允许指定默认值， 这为函数参数设置默认值提供基础</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组解构赋值的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;a&#x27;</span>] <span class=\"comment\">// x= &#x27;a&#x27;, y= &#x27;b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"string\">&#x27;a&#x27;</span>, y = <span class=\"string\">&#x27;b&#x27;</span>] = [<span class=\"string\">&#x27;aa&#x27;</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x=&#x27;aa&#x27;, y=&#x27;b&#x27; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象解构赋值的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; x, y = <span class=\"number\">5</span>&#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x<span class=\"comment\">//1</span></span><br><span class=\"line\">y<span class=\"comment\">//5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p>这里只讨论一下参数为<code>object</code> 类型时， 该如何设置默认值， 比如一些 options 的设置， 通过设置默认值， 可有效避免<code> var foo =options.foo || &#39;default foo&#39;;</code> 有三种形式， 注意这三种的区别： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ajax1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;type = <span class=\"string\">&#x27;GET&#x27;</span>, dataType &#125; = &#123;&#125; </span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ajax2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;&#125; =&#123;type = <span class=\"string\">&#x27;GET&#x27;</span>, dataType = <span class=\"string\">&#x27;json&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ajax3 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;type= <span class=\"string\">&#x27;GET&#x27;</span>, dataType = <span class=\"string\">&#x27;json&#x27;</span>&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>ajax1</code> 的默认参数表示， 如果没有传入<code>options</code> ，则用一个没有键值对的对象（） 作为默认值， 正应如此 ，传入的<code>options</code> 没有<code>options.type</code> 和 <code>options.dataType</code> 这两个属性， 则赋予默认值 <code>type = &#39;GET&#39; , dataType = &#39;json&#39;</code> ， 这是针对键值对某一个 <code>key</code>设默认值。</p>\n</li>\n<li><p><code>ajax2</code> 的默认参数表示， 如果没有传入<code>options</code> 对象， 则用一个 <code>&#123;type = &#39;GET&#39;, dataType = &#39;json&#39;&#125;</code> 这样的<code>options</code> 对象作为默认值， 这是争对一整个<code>options</code> 设默认值， 弊端就是如果开发者在使用时 这样写： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax2(url, &#123;type= <span class=\"string\">&#x27;POST&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>那么 <code>dataType</code> 参数将要丢失， 因为<code>&#123;type = &#39;POST&#39;&#125;</code>代替了默认参数 <code>&#123; type = &#39;GET&#39;， dataType = ’JSON‘&#125;</code>,  所以一般通过形如<code>ajax1</code> 的方式定义默认参数。</p>\n</li>\n<li><p><code>ajax3</code> 的默认参数有一个问题， 就是当没有传入<code>options</code> 的时候， 相当于从<code>undefined</code> 中取值 <code>type, dataType</code> 来解构，<br>所以会报错。  就是这样 <code>ajax1</code> 才会通过<code>= &#123;&#125;</code>的方式， 把不传入<code>options</code> 的情况过滤掉。</p>\n</li>\n</ul>\n","categories":[],"tags":[{"name":"ES6标准入门阅读总结","path":"api/tags/ES6标准入门阅读总结.json"}]}