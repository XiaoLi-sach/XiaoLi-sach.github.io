{"title":"Proxy 和 Reflect","slug":"Proxy和Reflect","date":"2021-03-30T10:49:59.558Z","updated":"2021-03-30T11:25:24.954Z","comments":true,"excerpt":"","content":"<p><code>Proxy </code>代理对象的各种内置方法, <code>get ``set ``construct </code>等, 类似于拦截器 .<br><code>Reflect </code>则作为 <code>Object </code>的代替者, <code>Object </code>上的一些静态方法被移植到了 <code>Reflect </code>上.<br><code>Reflect </code>对象一共有13个静态方法。</p>\n<ul>\n<li>Reflect.apply(target, thisArg, args)</li>\n<li>Reflect.construct(target, args)</li>\n<li>Reflect.get(target, name, receiver)</li>\n<li>Reflect.set(target, name, value, receiver)</li>\n<li>Reflect.defineProperty(target, name, desc)</li>\n<li>Reflect.deleteProperty(target, name)</li>\n<li>Reflect.has(target, name)</li>\n<li>Reflect.ownKeys(target)</li>\n<li>Reflect.preventExtensions(target)</li>\n<li>Reflect.getOwnPropertyDescritptor(target, name)</li>\n<li>Reflect.getPrototypeOf(target)</li>\n<li>Reflect.setPrototypeOf(target)<br>通过 <code>Proxy </code>和 <code>Reflect  </code>可以实现观察者模式， 就是监听<code>set </code>方法，执行相应操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Li&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> personObserved = observe(person)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`setting <span class=\"subst\">$&#123;key&#125;</span> to <span class=\"subst\">$&#123;value&#125;</span>!`</span>) <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn Reflect.set(target, key, value, receiver)</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">personObseved.name = &#x27;zhao&#x27;</span></span><br><span class=\"line\"><span class=\"string\">// setting name to zhao</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":[],"tags":[{"name":"ES6标准入门阅读总结","path":"api/tags/ES6标准入门阅读总结.json"}]}